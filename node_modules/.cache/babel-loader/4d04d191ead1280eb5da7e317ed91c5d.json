{"ast":null,"code":"var _jsxFileName = \"/Users/nicholostyler/Documents/GitHub/Pokedex-battle/src/Pokegame.js\";\nimport React, { Component } from 'react';\nimport Pokedex from './Pokedex';\nconst NAME_API = 'https://pokeapi.co/api/v2/pokemon/';\n\nclass Pokegame extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      hand1: [],\n      hand2: []\n    };\n  }\n\n  componentWillMount() {\n    console.log('before async');\n    SVGAnim;\n  }\n\n  render() {\n    if (this.state.loading === false) {\n      let winner = this.determineWinner();\n      return React.createElement(\"div\", {\n        className: \"Pokegame\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, \"Hand One\"), React.createElement(Pokedex, {\n        hand: this.state.hand1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }), React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, \"Hand 2\"), React.createElement(Pokedex, {\n        hand: this.state.hand2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, \"Winner \", winner));\n    } else {\n      return React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, \"Loading...\");\n    }\n  }\n\n  determineWinner() {\n    var sum = 0;\n    var sum2 = 0;\n    this.state.hand1.forEach(function (item) {\n      sum += item.base_experience;\n    });\n    this.state.hand2.forEach(function (item) {\n      sum2 += item.base_experience;\n    });\n    console.log(\"sum 1: \" + sum);\n    console.log(\"sum2: \" + sum2);\n    if (sum > sum2) return \"Hand1 Won!\";else return \"Hand2 Won!\";\n  }\n\n  randomID() {\n    let min = Math.ceil(1);\n    let max = Math.floor(150);\n    return Math.floor(Math.random() * (max - min)) + min;\n  }\n\n  async fetchData() {\n    let datas = [];\n\n    for (let step = 0; step < 8; step++) {\n      let id = this.randomID();\n      let url = `${NAME_API}${id}`;\n      let res = await fetch(url);\n      let json = await res.json();\n      datas.push(json);\n    }\n\n    return datas;\n  }\n\n  async buildHand() {\n    let data = await this.fetchData();\n    let data2 = await this.fetchData();\n    let hand1 = [];\n    let hand2 = [];\n\n    for (let step = 0; step < data.length; step++) {\n      let element = data[step];\n      let exp = element.base_experience;\n      let name = element.name;\n      let type = element.types[0].type.name;\n      hand1.push({\n        id: element.id,\n        base_experience: exp,\n        name: name,\n        type: type\n      });\n    }\n\n    for (let step = 0; step < data2.length; step++) {\n      let element = data2[step];\n      let exp = element.base_experience;\n      let name = element.name;\n      let type = element.types[0].type.name;\n      hand2.push({\n        id: element.id,\n        base_experience: exp,\n        name: name,\n        type: type\n      });\n    }\n\n    this.setState({\n      loading: false,\n      hand1: hand1,\n      hand2: hand2\n    });\n  }\n\n}\n\nexport default Pokegame;","map":{"version":3,"sources":["/Users/nicholostyler/Documents/GitHub/Pokedex-battle/src/Pokegame.js"],"names":["React","Component","Pokedex","NAME_API","Pokegame","constructor","props","state","loading","hand1","hand2","componentWillMount","console","log","SVGAnim","render","winner","determineWinner","sum","sum2","forEach","item","base_experience","randomID","min","Math","ceil","max","floor","random","fetchData","datas","step","id","url","res","fetch","json","push","buildHand","data","data2","length","element","exp","name","type","types","setState"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Pokedex from './Pokedex';\n\nconst NAME_API =\n    'https://pokeapi.co/api/v2/pokemon/';\n    \nclass Pokegame extends Component {    \n    constructor (props) {\n        super(props);\n        this.state = {\n            loading: true,\n            hand1: [],\n            hand2: []\n        }\n    }\n\n    componentWillMount() {\n        console.log('before async');\n        SVGAnim\n    }\n\n    render() {\n        if (this.state.loading === false){\n            let winner = this.determineWinner();\n            return (\n                <div className=\"Pokegame\">\n                    <h1>Hand One</h1>\n                    <Pokedex hand={this.state.hand1}/>\n                    <h1>Hand 2</h1>\n                    <Pokedex hand={this.state.hand2}/>\n                    <h3>Winner {winner}</h3>\n                </div>\n        )\n        } else {\n            return <h1>Loading...</h1>\n        }\n    }\n    \n\n    determineWinner() \n    {\n        var sum = 0;\n        var sum2 = 0;\n        this.state.hand1.forEach(function(item){\n            sum += item.base_experience;\n        });\n\n        this.state.hand2.forEach(function(item){\n            sum2 += item.base_experience;\n        });\n\n        console.log(\"sum 1: \" + sum);\n        console.log(\"sum2: \" + sum2);\n\n        if (sum > sum2)\n            return \"Hand1 Won!\";\n        else \n            return \"Hand2 Won!\";\n    }\n\n    randomID(){\n        let min = Math.ceil(1);\n        let max = Math.floor(150);\n        return Math.floor(Math.random() * (max - min)) + min;\n    }\n\n    async fetchData() {\n        let datas = [];\n\n        for (let step = 0; step < 8; step++) {\n            let id = this.randomID();\n            let url = `${NAME_API}${id}`;\n\n            let res = await fetch(url);\n            let json = await res.json();\n            datas.push(json);\n        }\n        return datas;\n    }\n\n    async buildHand() {\n        let data = await this.fetchData();\n        let data2 = await this.fetchData();\n\n        let hand1 = [];\n        let hand2 = [];\n\n        for(let step = 0; step < data.length; step++) {\n            let element = data[step];\n            let exp = element.base_experience;\n            let name = element.name;\n            let type = element.types[0].type.name;\n            hand1.push({id: element.id, base_experience: exp, name: name, type: type});\n        }\n\n        for(let step = 0; step < data2.length; step++) {\n            let element = data2[step];\n            let exp = element.base_experience;\n            let name = element.name;\n            let type = element.types[0].type.name;\n            hand2.push({id: element.id, base_experience: exp, name: name, type: type});\n        }\n        this.setState({loading: false, hand1: hand1, hand2: hand2});\n    }\n\n\n}\n\nexport default Pokegame;"]},"metadata":{},"sourceType":"module"}