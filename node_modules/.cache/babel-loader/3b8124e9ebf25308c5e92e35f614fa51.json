{"ast":null,"code":"var _jsxFileName = \"/Users/nicholostyler/Documents/pokedex-app/src/Pokegame.js\";\nimport React, { Component } from 'react';\nimport Pokedex from './Pokedex';\nconst NAME_API = 'https://pokeapi.co/api/v2/pokemon/';\n\nclass Pokegame extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      hand1: [],\n      hand2: []\n    };\n  }\n\n  componentWillMount() {\n    this.buildHand();\n  }\n\n  render() {\n    if (this.state.loading == false) {\n      return React.createElement(\"div\", {\n        className: \"Pokegame\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, React.createElement(Pokedex, {\n        hand: this.state.hand1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }), React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, \"VS\"), React.createElement(Pokedex, {\n        hand: this.state.hand2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }));\n    } else {\n      return React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, \"Loading...\");\n    }\n  }\n\n  randomID() {\n    let min = Math.ceil(1);\n    let max = Math.floor(150);\n    return Math.floor(Math.random() * (max - min)) + min;\n  }\n\n  async fetchData() {\n    let id = this.randomID();\n    let url = `${NAME_API}${id}`;\n    fetch(url).then(res => res.json()).then();\n  }\n\n  async fetchJSON() {\n    const data = await this.fetchData();\n    const json = await data.json();\n    return json;\n  }\n\n  async buildHand() {\n    let hand1 = [];\n    let hand2 = [];\n\n    for (let step = 0; step < 8; step++) {\n      const data = await this.fetchData();\n      const json = await data.json();\n      hand1.push(json);\n    }\n\n    console.log(hand1);\n  }\n\n  async parseJSONData() {\n    let data1 = [];\n    let data2 = [];\n    let hand1 = [];\n    let hand2 = [];\n\n    for (let step = 0; step < 8; step++) {\n      let id = this.randomID();\n      let url = fetch(url).then(res => res.json()).then(json => data1.push(json));\n    }\n\n    for (let step = 0; step < 8; step++) {\n      let id = this.randomID();\n      let url = `${NAME_API}${id}`;\n      fetch(url).then(res => res.json()).then(json => data2.push(json));\n    }\n\n    for (let step = 0; step < 8; step++) {\n      console.log(data1[step]);\n      let element = data1[step];\n      hand1.push({\n        id: element.id,\n        name: element.name,\n        type: element.types[0].type.name,\n        base_experience: element.base_experience\n      });\n    }\n\n    console.log('here i am');\n    data1.forEach(element => {\n      console.log(element);\n      hand1.push({\n        id: element.id,\n        name: element.name,\n        type: element.types[0].type.name,\n        base_experience: element.base_experience\n      });\n    });\n    data2.forEach(element => {\n      hand2.push({\n        id: element.id,\n        name: element.name,\n        type: element.types[0].type.name,\n        base_experience: element.base_experience\n      });\n    });\n    this.setState({\n      hand1: hand1,\n      hand2: hand2,\n      loading: false\n    });\n    console.log(hand1); //const res = await fetch(url);\n    //const pokemon = await res.json();\n  }\n\n}\n\nexport default Pokegame;","map":{"version":3,"sources":["/Users/nicholostyler/Documents/pokedex-app/src/Pokegame.js"],"names":["React","Component","Pokedex","NAME_API","Pokegame","constructor","props","state","loading","hand1","hand2","componentWillMount","buildHand","render","randomID","min","Math","ceil","max","floor","random","fetchData","id","url","fetch","then","res","json","fetchJSON","data","step","push","console","log","parseJSONData","data1","data2","element","name","type","types","base_experience","forEach","setState"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Pokedex from './Pokedex';\n\nconst NAME_API =\n    'https://pokeapi.co/api/v2/pokemon/';\n    \nclass Pokegame extends Component {    \n    constructor (props) {\n        super(props);\n        this.state = {\n            loading: true,\n            hand1: [],\n            hand2: []\n        }\n    }\n\n    componentWillMount() {\n        this.buildHand();\n        \n    }\n\n    render() {\n        if (this.state.loading == false){\n            return (\n            <div className=\"Pokegame\">\n                <Pokedex hand={this.state.hand1} />\n                <h1>VS</h1>\n                <Pokedex hand={this.state.hand2} />\n            </div>\n        )\n        } else {\n            return <h1>Loading...</h1>\n        }\n    }\n    \n    randomID(){\n        let min = Math.ceil(1);\n        let max = Math.floor(150);\n        return Math.floor(Math.random() * (max - min)) + min;\n    }\n\n    async fetchData() {\n        let id = this.randomID();\n        let url = `${NAME_API}${id}`;\n        fetch(url)\n            .then(res => res.json())\n            .then()\n    }\n\n    async fetchJSON () {\n        const data = await this.fetchData();\n        const json = await data.json();\n        return json;\n    }\n\n    async buildHand() {\n        let hand1 = [];\n        let hand2 = [];\n        \n        for (let step = 0; step < 8; step++) {\n            const data = await this.fetchData();\n            const json = await data.json();\n            hand1.push(json);\n        }\n        console.log(hand1);\n    }\n\n\n    async parseJSONData () {\n        let data1 = [];\n        let data2 = [];\n\n        let hand1 = [];\n        let hand2 = [];\n\n        for (let step = 0; step < 8; step++) {\n            let id = this.randomID();\n            let url = \n            fetch(url)\n                .then(res => res.json())\n                .then(json => data1.push(json));\n        }\n\n        for (let step = 0; step < 8; step++) {\n            let id = this.randomID();\n            let url = `${NAME_API}${id}`\n            fetch(url)\n                .then(res => res.json())\n                .then(json => data2.push(json));\n                \n        }\n\n        for (let step = 0; step < 8; step++) {\n            console.log(data1[step]);\n            let element = data1[step];\n            hand1.push({id: element.id, name: element.name, type: element.types[0].type.name, base_experience: element.base_experience})\n        }\n\n        console.log('here i am');\n        data1.forEach(element => {\n            console.log(element);\n            hand1.push({id: element.id, name: element.name, type: element.types[0].type.name, base_experience: element.base_experience})\n        });\n        data2.forEach(element => {\n            hand2.push({id: element.id, name: element.name, type: element.types[0].type.name, base_experience: element.base_experience})\n        });\n\n        this.setState({hand1: hand1, hand2: hand2, loading: false});\n        console.log(hand1);\n        //const res = await fetch(url);\n        //const pokemon = await res.json();\n    }\n}\n\nexport default Pokegame;"]},"metadata":{},"sourceType":"module"}