{"ast":null,"code":"var _jsxFileName = \"/Users/nicholostyler/Documents/pokedex-app/src/Pokegame.js\";\nimport React, { Component } from 'react';\nimport Pokedex from './Pokedex';\nconst NAME_API = 'https://pokeapi.co/api/v2/pokemon/';\n\nclass Pokegame extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      hand1: null,\n      hand2: null\n    };\n  }\n\n  componentWillMount() {\n    let data1 = this.fetchData();\n    let data2 = this.fetchData();\n    this.state.hand1 = this.createHand(data1);\n    this.state.hand2 = this.createHand(data2);\n  }\n\n  render() {\n    if (this.state.loading == false) {\n      return React.createElement(\"div\", {\n        className: \"Pokegame\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, React.createElement(Pokedex, {\n        hand: hand1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }), React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, \"VS\"), React.createElement(Pokedex, {\n        hand: hand2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }));\n    } else {\n      return React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, \"Loading...\");\n    }\n  }\n\n  createHand(data) {\n    let hand = [];\n    data.forEach(element => {\n      hand = [hand.push({\n        id: element.id,\n        name: element.name,\n        type: element.types[0].type.name,\n        base_experience: element.base_experience\n      })];\n    });\n    return hand;\n  }\n\n  fetchData() {\n    let id = this.randomID();\n    let url = `${NAME_API}${id}`;\n    let hand = [this.pareJSONData(id, url), this.pareJSONData(id, url), this.pareJSONData(id, url), this.pareJSONData(id, url), this.pareJSONData(id, url), this.pareJSONData(id, url), this.pareJSONData(id, url), this.pareJSONData(id, url)];\n    return hand;\n  }\n\n  randomID() {\n    let min = Math.ceil(1);\n    let max = Math.floor(150);\n    return Math.floor(Math.random() * (max - min)) + min;\n  }\n\n  async pareJSONData(id, url) {\n    const res = await fetch(url);\n    const pokemon = await res.json();\n    const pokemonName = pokemon.name;\n    const pokemonEXP = pokemon.base_experience;\n    const pokemonType = pokemon.types[0].type.name; //console.log(pokemon);\n    //this.setState({data: pokemon});\n\n    return pokemon; //this.setState({name: pokemonName, base_experience: pokemonEXP, type: pokemonType});\n    //console.log('state changed');\n  }\n\n}\n\nexport default Pokegame;","map":{"version":3,"sources":["/Users/nicholostyler/Documents/pokedex-app/src/Pokegame.js"],"names":["React","Component","Pokedex","NAME_API","Pokegame","constructor","props","state","loading","hand1","hand2","componentWillMount","data1","fetchData","data2","createHand","render","data","hand","forEach","element","push","id","name","type","types","base_experience","randomID","url","pareJSONData","min","Math","ceil","max","floor","random","res","fetch","pokemon","json","pokemonName","pokemonEXP","pokemonType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Pokedex from './Pokedex';\n\nconst NAME_API =\n    'https://pokeapi.co/api/v2/pokemon/';\n\nclass Pokegame extends Component {    \n    constructor (props) {\n        super(props);\n        this.state = {\n            loading: true,\n            hand1: null,\n            hand2: null\n        }\n    }\n\n    componentWillMount() {\n        let data1 = this.fetchData();\n        let data2 = this.fetchData();\n\n        this.state.hand1 = this.createHand(data1);\n        this.state.hand2 = this.createHand(data2);\n        \n    }\n\n    render() {\n        if (this.state.loading == false){\n            return (\n            <div className=\"Pokegame\">\n                <Pokedex hand={hand1} />\n                <h1>VS</h1>\n                <Pokedex hand={hand2} />\n            </div>\n        )\n        } else {\n            return <h1>Loading...</h1>\n        }\n    }\n\n    createHand(data) {\n        let hand = [];\n        data.forEach(element => {\n            hand = [\n                hand.push({id: element.id, name: element.name, type: element.types[0].type.name, base_experience: element.base_experience})\n            ]\n        });\n\n        return hand;\n    }\n\n    fetchData() {\n        let id = this.randomID();\n        let url = `${NAME_API}${id}`\n        let hand = [\n            this.pareJSONData(id, url),\n            this.pareJSONData(id, url),\n            this.pareJSONData(id, url),\n            this.pareJSONData(id, url),\n            this.pareJSONData(id, url),\n            this.pareJSONData(id, url),\n            this.pareJSONData(id, url),\n            this.pareJSONData(id, url),\n        ];\n\n        return hand;\n    }\n    \n    randomID(){\n        let min = Math.ceil(1);\n        let max = Math.floor(150);\n        return Math.floor(Math.random() * (max - min)) + min;\n    }\n\n    async pareJSONData (id, url) {\n        const res = await fetch(url);\n        const pokemon = await res.json();\n\n        const pokemonName = pokemon.name;\n        const pokemonEXP = pokemon.base_experience;\n        const pokemonType = pokemon.types[0].type.name;\n        //console.log(pokemon);\n        //this.setState({data: pokemon});\n        return pokemon;\n        //this.setState({name: pokemonName, base_experience: pokemonEXP, type: pokemonType});\n       //console.log('state changed');\n    }\n}\n\nexport default Pokegame;"]},"metadata":{},"sourceType":"module"}